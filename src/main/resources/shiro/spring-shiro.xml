<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd">
    <description>Shiro安全配置</description>

    <!--结合spring，定义shiro的各个组件（组件的组成见shiro的架构图）-->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!--安全管理器-->
        <property name="securityManager" ref="securityManager"></property>
        <!--自定义访问拦截器-->
        <!--<property name="filters">-->
            <!--<map>-->
                <!-- 创建一个基于拦截器的表单过滤器处理请求 -->
                <!--<entry key="authc" value-ref="formAuthenFilter"/>-->
            <!--</map>-->
        <!--</property>-->
        <!--使用shiro的访问拦截器-->
        <property name="filterChainDefinitions">
            <ref bean="shiroFilterChainDefinitions"></ref>
        </property>
        <!--登录页地址-->
        <property name="loginUrl" value="/login/getQrCode"></property>
        <!--登录成功页跳转地址-->
        <property name="successUrl" value="/index"></property>
        <!--权限认证不通过时的跳转地址-->
        <property name="unauthorizedUrl" value="/error/refuse"></property>
    </bean>

    <!--定义安全管理器配置-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!--定义认证器-->
        <property name="authenticator" ref="authenticator"></property>
        <!--定义认证规则-->
        <property name="realms">
            <list>
                <ref bean="wechatAuthorizingRealm"></ref>
                <!--<ref bean="mobileFormAuthorizingRealm"></ref>-->
            </list>
        </property>
        <!--定义缓存管理器，利用ehcache对授权信息，登录信息等需要读取数据库的信息进行缓存-->
        <property name="cacheManager" ref="cacheManager"></property>
        <!--定义session管理器-->
        <property name="sessionManager" ref="sessionManager"></property>
        <!--定义记住我-->
        <!--<property name="rememberMeManager" ref="rememberMeManager"></property>-->
     </bean>

    <!-- 配置使用自定义认证器，可以实现多Realm认证，并且可以指定特定Realm处理特定类型的验证 -->
    <bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
        <!-- 配置认证策略，只要有一个Realm认证成功即可，并且返回所有认证成功信息(也可以去定义其他的认证策略) -->
        <property name="authenticationStrategy">
            <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"></bean>
        </property>
    </bean>

    <!--定义PC端的认证规则-->
    <bean id="wechatAuthorizingRealm" class="com.zhrt.shiro.WechatAuthorizingRealm" />
    <!-- 定义手机端的认证规则 -->
    <!--<bean id="mobileFormAuthorizingRealm" class="com.zhrt.shiro.security.PCFormAuthorizingRealm" />-->

    <!-- ehcache缓存配置 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:shiro/shiro-ehcache.xml"/>
    </bean>

    <!--自定义session管理器-->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!--会话监听器-->
        <!--<property name="sessionListeners" ref="sysSessionListener"></property>-->
        <!--sessionManager创建会话Cookie的模板-->
        <property name="sessionIdCookie">
            <bean class="org.apache.shiro.web.servlet.SimpleCookie">
                <!-- 自定义会话标识默认为JSESSIONID -->
                <constructor-arg name="name" value="SR-SESSION-ID" />
                <!--设置Cookie的域名，默认空，即当前访问的域名；-->
                <!--<property name="domain" value=""/>-->
                <!--设置Cookie的路径，默认空，即存储在域名根下-->
                <!--<property name="path" value=""/>-->
                <!--设置Cookie的过期时间，秒为单位，默认-1表示关闭浏览器时过期Cookie；-->
                <!--<property name="maxAge" value="">-->
                <!-- 如果设置为true，则客户端不会暴露给客户端脚本代码，使用HttpOnly cookie有助于减少某些类型的跨站点脚本攻击；此特性需要实现了Servlet 2.5 MR6及以上版本的规范的Servlet容器支持 -->
                <property name="httpOnly" value="true"/>
            </bean>
        </property>
        <!--利用redis实现分布式会话管理-->
        <!--<property name="sessionDAO" ref="redisSessionDao"/>-->
        <!-- 是否启用/禁用Session Id Cookie，默认是启用的；如果禁用后将不会设置Session Id Cookie，即默认使用了Servlet容器的JSESSIONID，且通过URL重写（URL中的“;JSESSIONID=id”部分）保存Session Id -->
        <property name="sessionIdCookieEnabled" value="true" />
        <!-- 定时清理僵尸会话 （即一些例如用户直接关闭浏览器导致的会话失效）-->
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <!-- session超时时间毫秒 -->
        <property name="globalSessionTimeout" value="86400000"/>
    </bean>

    <!-- 自定义session监听类 -->
    <!--<bean id="sysSessionListener" class="com.zhrt.shiro.listener.SysSessionListener"/>-->

    <!-- 自定义redis分布式会话管理实现类 -->
    <!--<bean id="redisSessionDao" class="com.zhrt.common.shiro.RedisSessionDao" />-->

    <!-- session会话过期校验定时器毫秒 -->
    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
        <!--设置调度时间间隔，单位毫秒，默认就是1小时-->
        <property name="interval" value="600000"></property>
        <!--设置会话验证调度器进行会话验证时的会话管理器-->
        <property name="sessionManager" ref="sessionManager"></property>
    </bean>

    <!--&lt;!&ndash; rememberMeManager管理器 &ndash;&gt;-->
    <!--<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">-->
        <!--<property name="cookie" ref="rememberMeCookie" />-->
    <!--</bean>-->
    <!--&lt;!&ndash; 记住我cookie &ndash;&gt;-->
    <!--<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">-->
        <!--<constructor-arg value="admin.rememberMe" />-->
        <!--&lt;!&ndash; 记住我cookie生效时间1天 &ndash;&gt;-->
        <!--<property name="maxAge" value="86400" />-->
    <!--</bean>-->

    <!--shiro的拦截规则设置-->
    <bean name="shiroFilterChainDefinitions" class="java.lang.String">
        <constructor-arg>
            <value>
                <!--拦截器规则语法：url模式=拦截器(可以配置多个，以逗号分隔)，如果存在url模式重合的话，则使用最先匹配的拦截器
                    url模式语法：
                        ?：匹配一个字符，如”/admin?”将匹配/admin1，但不匹配/admin或/admin
                        *：匹配零个或多个字符串，如/admin*将匹配/admin、/admin123，但不匹配/admin/1；
                        **：匹配路径中的零个或多个路径，如/admin/**将匹配/admin/a或/admin/a/b。
                    拦截器类型：
                        anno：匿名访问拦截器，不需要身份验证就能访问
                        authc:身份验证之后才能访问
                        roles[xxx]:只有xxx角色才能访问
                        perms["xxx"]:只有xxx权限的用户才能访问
                -->
                /resources/** = anon
                /logout = logout
                /error/** = anon
                /login/getQrCode = anon
                /login/getAccessToken = anon
                /** = anon
            </value>
        </constructor-arg>
    </bean>

    <!--定义登出拦截器-->
    <bean id="logout" class="org.apache.shiro.web.filter.authc.LogoutFilter">
        <property name="redirectUrl" value="/login" />
    </bean>

    <!--自定义表单拦截器-->
    <!--<bean id="formAuthenFilter" class="com.zhrt.shiro.FormAuthenFilter"></bean>-->
</beans>